- Class: meta
  Course: Y2 Psychology RMS1
  Lesson: Lesson 1 Arithmetic
  Author: Milan Valasek, Nick Carchedi
  Type: Standard
  Organization: The University of Edinburgh, JHU Biostat
  Version: 0.9
  
- Class: text
  Output: Ahoy matey! So you come to me to learn the ways of aarrr?!

- Class: mult_question
  Output: "OK... So now that that one's out of the way, let's agree not to
  make R-related pirate jokes ever again, right?"
  AnswerChoices: Aye aye captain!; Gladly!
  CorrectAnswer: Gladly!
  AnswerTests: omnitest(correctVal= 'Gladly!')
  Hint: This is going to be a lot easier if we just play nice. :)

- Class: text
  Output: "Excellent! Let me welcome you to the UoE Y2 Psychology
  Research Methods and Statistics 1 swirl tutorials. I know this may all look
  a bit scary now but don't worry; I will guide you through various topics
  step by step and, before you know it, you will feel right at home with R.
  Let us begin!"
  
- Class: text
  Output: "First, a quick check. Make sure you are using R Studio, for it is
  quite handy. You also want to have the 4-window setup:\n
  1) your console window, which is where I am talking to you;\n
  2) your script window, which you will be  using later on to do some fancier stuff;\n
  3) your environment window, and\n
  4) your files/plots/packages/help... window."
  
- Class: text
  Output: "In this tutorial, you will only be working with the console. Here, you will
  type in all the commands and give all answers to my questions. Remember that the
  Internet is your friend. Should you find yourself stuck, simply look up \"<relevant
  issue> in r\" using your favourite search engine. There are also some very handy websites
  with tons of R-related resources."
  
- Class: video
  Output: "One such website is Stack Overflow. It is basically an online community where
  people ask and answer questions about all sorts of things, not only R. You can browse
  through the available content or create an account and take a more active part. Would you
  like me to open the website for you so you can perhaps bookmark it?"
  VideoLink: "http://stackoverflow.com/"
  
- Class: text
  Output: "Very well, I think you are now ready to start so off we go!"
  
- Class: cmd_question
  Output: "R is a powerful programming language and can be used for many things. In its
  simplest form, it can be used as a calculator. Type 2 + 2 and press Enter."
  CorrectAnswer: 2 + 2
  AnswerTests: omnitest(correctExpr='2 + 2')
  Hint: Type 2 + 2 and press Enter.
  
- Class: cmd_question
  Output: "As you can see, R gave you the result (for now, disregard the [1]). Naturally,
  other basic mathematical functions are also available. The following should do for the
  time being: \"+\", \"-\", \"*\", \"/\", \"^\", and \"sqrt()\". the \"^\" is for
  exponentiation (\"something to the power of...\") and the \"sqrt()\" takes the square
  root of whatever you put in the brackets. For instance, what would you type in if you
  wanted to find the square root of 3 to the power of 6?"
  CorrectAnswer: sqrt(3 ^ 6)
  AnswerTests: any_of_exprs('sqrt(3 ^ 6)', 'sqrt(3)^6')
  Hint: Type sqrt(3 ^ 6) and press Enter.
  
- Class: cmd_question
  Output: "Now, you might be thinking the wording of the task was a bit ambiguous. And you
  would be right, well done you! From what I said, it is not clear whether I wanted you to
  first raise 3 to the power of 6 and then take the square root of the result (sqrt(3 ^ 6))
  or first take the square root of 3 and then raise the result to the power of 6 (sqrt(3) ^ 6).
  As it happens, in this case both yield the same result. See for yourself: first try the
  former..."
  CorrectAnswer: sqrt(3 ^ 6)
  AnswerTests: omnitest(correctExpr='sqrt(3 ^ 6)')
  Hint: Type sqrt(3 ^ 6) and press Enter.
  
- Class: cmd_question
  Output: "...and now the latter."
  CorrectAnswer: sqrt(3) ^ 6
  AnswerTests: omnitest(correctExpr='sqrt(3) ^ 6')
  Hint: Type sqrt(3) ^ 6 and press Enter.
  
- Class: text
  Output: "This illustrates two crucial points regarding doing arithmetics in R."
  
- Class: text
  Output: "Firstly, R uses mathematical operations in a certain order; some of them get
  priority over others. At the bottom of this hierarchy are addition and subtraction
  (\"+\" and \"-\"), in the middle are multiplication and division (\"*\" and \"/\"),
  and at the top are exponentiation (\"^\") and sqrt(). Operations at the same level
  (e.g. \"+\" and \"-\") are equal and R executes them in the order in which they appear."
  
- Class: mult_question
  Output: "Let\'s practice a wee bit (och aye, of course I\'m Scottish!). What result will
  you get if you type in 10 - 5*2 + 6/2?"
  AnswerChoices: 8;3;0;-3;20
  CorrectAnswer: 3
  AnswerTests: omnitest(correctVal= '3')
  Hint: "Remember, first come the \"higher priority\" operations. \"Equal priority\"
  operations are calculated in the order in which they appear."
  
- Class: text
  Output: "Secondly, the order of operations can be modified using brackets (only use
  round brackets; square and curly brackets have a different function in R but more on
  that later). That means that (2 + 4) / 6 equals 1 because you first ad 2 and 4 and
  then divide the result by 6. All the operations within a set of brackets as well
  as all the operations outside any brackets follow the rules we talked about earlier.
  There can be multiple sets of brackets in a single command and one set can be embedded
  within another. In that case, the \"most deeply\" embedded set has the highest priority,
  then the second deepest, etc..."
  
- Class: mult_question
  Output: "So, what result will we get if we change the last example to
  (10 - 5)*((2 + 6)/2)?"
  AnswerChoices: 20;8;0;-3;3
  CorrectAnswer: 20
  AnswerTests: omnitest(correctVal= '20')
  Hint: "Remember, first deal with the most deeply embedded set of brackets (\"(2 + 6)\"),
  then move one level up (\"(10 - 5)\" and \"(x / 2)\"), and finally, multiply the two."

- Class: text
  Output: "Depending on the settings of your R Studio, you might have notice that each
  time you open a bracket, a closed bracket appears automatically. This is a nice
  feature but you still need to keep in mind that the number of open brackets has to
  match the number of closed brackets. Another helpful thing R Studio does for you is
  that when you move the cursor right behind a bracket it highlights its \"twin\"."
  
- Class: cmd_question
  Output: "Try typing (((( and see if the closed brackets appear automatically. If they
  don't, add them. Then move the cursor around using the left and right arrow keys and
  see how the highlighting works. When you're done exploring, delete what you typed,
  type in skip(), and press Enter."
  CorrectAnswer:
  AnswerTests: omnitest()
  Hint:

- Class: text
  Output: "Now, doing simple maths is all very nice but the point of a programming
  language is to automate some process or avoid unnecessary repetition and unnecessary
  repetition (see what I did there?)."
  
- Class: text
  Output: "Suppose we want to use the result of a calculation in a different calculation.
  Instead of retyping the first calculation every time we need it, we can just create
  a new variable that stores the result."
  
- Class: text
  Output: "The way you assign a value to a variable in R is by using the assignment
  operator, which is just a \"less than\" symbol followed by a \"minus\" sign. It
  looks like this: <-"

- Class: text
  Output: "Think of the assignment operator as an arrow. You are assigning the value
  on the right side of the arrow to the variable name on the left side of the arrow."

- Class: cmd_question
  Output: Try creating a new variable called x and assign it the value of 5 + 7.
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: "Type x <- 5 + 7. It's important to include a single space on each side of
  the assignment operator, but do NOT put a space between the \"<\" and the \"-\" that
  form the arrow."
    
- Class: text
  Output: "You'll notice that R did not print the result of 12 this time. When you
  use the assignment operator, R assumes that you don't want to see the result immediately,
  but rather that you intend to use the result for something else later on."
  
- Class: cmd_question
  Output: "To view the contents of the variable x, just type x and press Enter. Try
  it now."
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Type x and press Enter. This will automatically print the value of x.

- Class: cmd_question
  Output: Now, store the result of x - 3 in a new variable called y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: "Type y <- x - 3 and press Enter. Whether you use x - 3 or x-3 is personal
  preference, but it's good habit to include a space on either side of the assignment
  operator."
  
- Class: cmd_question
  Output: What is the value of y? Type y to find out.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Type y and press Enter.
  
- Class: text
  Output: "Now, let's create a small collection of numbers called a vector. Any object
  that contains data is called a data structure. Numeric vectors are the simplest
  type of data structure in R. In fact, even a single number is considered a vector
  of length one."

- Class: cmd_question
  Output: "The easiest way to create a vector is with the c() function, which stands
  for 'concatenate' or 'combine'. To create a vector containing the numbers 1.1,
  9, and 3.14, type c(1.1, 9, 3.14). Try it now and store the result in a variable
  called z."
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: "Inputting z <- c(1.1, 9, 3.14) will assign the vector (1.1, 9, 3.14) to a
  new variable called z. Including single spaces after the commas in the vector
  is not required, but helps make your code less cluttered and more readable."

- Class: cmd_question
  Output: "Anytime you have questions about a particular function, you can access R's
  built-in help files via the \"?\" command. For example, if you want more information
  on the c() function, type ?c without the parentheses that normally follow a function
  name. Give it a try."
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Type ?c and press Enter. This will bring up the help file for the c() function.

- Class: cmd_question
  Output: Type z to view its contents. Notice that there are no commas separating
    the values in the output.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Type z and press Enter to view its contents.

- Class: cmd_question
  Output: You can combine vectors to make a new vector. Create a new vector that contains
    z, 555, then z again in that order. Don't assign this vector to a new variable,
    so that we can just see the result immediately.
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Type c(z, 555, z). Don't create a new variable. We just want to view the result.

- Class: cmd_question
  Output: 'Numeric vectors can be used in arithmetic expressions just like numbers. Type
    the following to see what happens: z * 2 + 100.'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Enter z * 2 + 100, without assigning the result to a variable.

- Class: text
  Output: First, R multiplied each of the three elements in z by 2. Then it added
    100 to each element to get the result you see above.

- Class: text
  Output: "As a refresher, other common arithmetic operators are \"+\", \"-\", \"/\", and
    \"^\" (where x^2 means \"x squared\"). To take the square root, use the sqrt() function
    and to take the absolute value, use the abs() function."

- Class: cmd_question
  Output: Take the square root of z - 1 and assign it to a new variable called my_sqrt.
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: Assign the result of sqrt(z - 1) to a variable called my_sqrt.

- Class: mult_question
  Output: Before we view the contents of the my_sqrt variable, what do you think it
    contains?
  CorrectAnswer: a vector of length 3
  AnswerChoices: a vector of length 3; a single number (i.e a vector of length 1);
    a vector of length 0 (i.e. an empty vector)
  AnswerTests: omnitest(correctVal='a vector of length 3')
  Hint: "Think about how R handled the other \"vectorised\" operations: element-by-element."

- Class: cmd_question
  Output: Print the contents of my_sqrt.
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: Just type my_sqrt and press Enter to view its value.

- Class: text
  Output: As you may have guessed, R first subtracted 1 from each element of z, then
    took the square root of each element. This leaves you with a vector of the same
    length as the original vector z.

- Class: cmd_question
  Output: Now, create a new variable called my_div that gets the value of z divided
    by my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: "Enter my_div <- z / my_sqrt. The spaces on either side of the \"/\" sign are not
    required, but can often improve readability by making code appear less cluttered.
    In the end, it's personal preference."
  
- Class: mult_question
  Output: Which statement do you think is true?
  CorrectAnswer: The first element of my_div is equal to the first element of z divided
    by the first element of my_sqrt, and so on...
  AnswerChoices: The first element of my_div is equal to the first element of z divided
    by the first element of my_sqrt, and so on...; my_div is a single number (i.e a
    vector of length 1); my_div is undefined
  AnswerTests: omnitest(correctVal='The first element of my_div is equal to the first
    element of z divided by the first element of my_sqrt, and so on...')
  Hint: "Think about how R handled the other \"vectorised\" operations like \"+\" and \"*\"."
  
- Class: cmd_question
  Output: Go ahead and print the contents of my_div.
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Type my_div and press Enter to see its contents.
  
- Class: text
  Output: "When given two vectors of the same length, R simply performs the specified
    arithmetic operation (\"+\", \"-\", \"*\", etc.) element-by-element. If the vectors
    are of different lengths, R 'recycles' the shorter vector until it is the same
    length as the longer vector."
    
- Class: text
  Output: When we did z * 2 + 100 in our earlier example, z was a vector of length
    3, but technically 2 and 100 are each vectors of length 1.
  
- Class: text
  Output: "Behind the scenes, R is \"recycling\" the 2 to make a vector of 2s and
    the 100 to make a vector of 100s. In other words, when you ask R to compute z
    * 2 + 100, what it really computes is this: z * c(2, 2, 2) + c(100, 100, 100)."

- Class: cmd_question
  Output: "To see another example of how this vector \"recycling\" works, try adding
    c(1, 2, 3, 4) and c(0, 10). Don't worry about saving the result in a new variable."
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Enter c(1, 2, 3, 4) + c(0, 10) in the console to see how R adds two vectors
    of different length. Don't assign the result to a variable.

- Class: text
  Output: "If the length of the shorter vector does not divide evenly into the length
    of the longer vector, R will still apply the \"recycling\" method, but will throw
    a warning to let you know something fishy might be going on."

- Class: cmd_question
  Output: Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Type c(1, 2, 3, 4) + c(0, 10, 100) to see how R handles adding two vectors,
    when the shorter vector's length does not divide evenly into the longer vector's
    length. Don't worry about assigning the result to a variable.
  
- Class: text
  Output: Before concluding this lesson, I'd like to show you a couple of time-saving tricks.

- Class: text
  Output: Earlier in the lesson, you computed z * 2 + 100. Let's pretend that you made a
    mistake and that you meant to add 1000 instead of 100. You could either re-type the
    expression, or...

- Class: cmd_question
  Output: In R Studio, the up arrow will cycle through previous commands. Try hitting the up
    arrow on your keyboard until you get to this command (z * 2 + 100), then change 100 to 1000
    and hit Enter.
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: If, for some reason, the arrow isn't working just type the corrected command to
    move on.

- Class: text
  Output: Finally, let's pretend you'd like to view the contents of a variable that you
    created earlier, but you can't seem to remember if you named it my_div or myDiv. You
    could try both and see what works, or...

- Class: cmd_question
  Output: You can type the first two letters of the variable name, then hit the Tab key
    (possibly more than once). R Studio will provide a list of variables that you've created
    that begin with 'my'. This is called auto-completion and can be quite handy when you have
    many variables in your workspace. Give it a try. (If auto-completion doesn't work for you,
    just type my_div and press Enter.)
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: If the auto-completion isn't working, just type my_div and hit Enter to move on.
  
- Class: text
  Output: Smashin! Congratulations on completing the first swirl lesson. I think you did
    very well. There's a lot more in store for you so keep up the great work! Press Enter
    to finish this lesson and I'll see you in the next one.
